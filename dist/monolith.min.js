"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}angular.module("akabuskAppModule",["assertModule"]),angular.module("akabuskAppModule").config(["$interpolateProvider","$compileProvider",function($interpolateProvider,$compileProvider){$interpolateProvider.startSymbol("[["),$interpolateProvider.endSymbol("]]"),$compileProvider.debugInfoEnabled(!1),$compileProvider.commentDirectivesEnabled(!1),$compileProvider.cssClassDirectivesEnabled(!1)}]),angular.module("akabuskAppModule").run([function(){console.debug("app initialized")}]);var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();angular.module("assertModule",[]);var AssertService=function(){function AssertService(){_classCallCheck(this,AssertService)}return _createClass(AssertService,[{key:"isTrue",value:function isTrue(expression){if(expression!==!0)throw new Error(this._getText("true expression"))}},{key:"isFalse",value:function isFalse(expression){if(expression!==!1)throw new Error(this._getText("false expression"))}},{key:"isDefined",value:function isDefined(value){if("undefined"==typeof value)throw new Error(this._getText("defined value"))}},{key:"isNull",value:function isNull(value){if(null!==value)throw new Error(this._getTextWithValue("null",value))}},{key:"isBool",value:function isBool(value){if(!_.isBoolean(value))throw new Error(this._getTextWithValue("boolean",value))}},{key:"isNumber",value:function isNumber(value){if(!_.isNumber(value))throw new Error(this._getTextWithValue("number",value))}},{key:"isInteger",value:function isInteger(value){if(!Number.isInteger(value))throw new Error(this._getTextWithValue("integer",value))}},{key:"isString",value:function isString(value){if(!_.isString(value))throw new Error(this._getTextWithValue("string",value))}},{key:"isPlainObject",value:function isPlainObject(value){if(!_.isPlainObject(value))throw new Error(this._getTextWithValue("plain object",value))}},{key:"isArray",value:function isArray(value){if(!_.isArray(value))throw new Error(this._getTextWithValue("array",value))}},{key:"isFunction",value:function isFunction(value){if(!_.isFunction(value))throw new Error(this._getTextWithValue("function",value))}},{key:"_getText",value:function _getText(expectedText){return"Assertion failed: expected "+expectedText}},{key:"_getTextWithValue",value:function _getTextWithValue(expectedText,value){var simpleMessage=this._getText(expectedText);return simpleMessage+", but got {"+("undefined"==typeof value?"undefined":_typeof(value))+"} "+value+" instead"}}]),AssertService}();angular.module("assertModule").service("assert",AssertService),console.log("moduleOne"),console.log("moduleTwo");